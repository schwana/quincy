/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.heliumsinglefile;

import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author James
 */
public class HeliumSingleFileUI extends javax.swing.JFrame {

    /**
     * Creates new form HeliumSingleFileUI
     */
    public HeliumSingleFileUI() {
        initComponents();
        jPanelBlankCorrect.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelRAW = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListRAWFiles = new javax.swing.JList();
        jPanelCharts = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanelM1 = new javax.swing.JPanel();
        jPanelHD = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanelM3 = new javax.swing.JPanel();
        jPanel3He = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4He = new javax.swing.JPanel();
        jPanel4He3He = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRAWResults = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanelBlankCorrect = new javax.swing.JPanel();
        jScrollPaneData = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jScrollPaneBlank = new javax.swing.JScrollPane();
        jTableBlank = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemFileLoadDir = new javax.swing.JMenuItem();
        jMenuItemSaveNcc = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemDataProcessRAW = new javax.swing.JMenuItem();
        jMenuDataBlank = new javax.swing.JMenu();
        jMenuItemDataBlankSelected = new javax.swing.JMenuItem();
        jMenuItemDataBlankAll = new javax.swing.JMenuItem();
        jMenuItemCalcNCC = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jRadioButtonMenuBFAll = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuBFSel = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HSF 1.0 (23-10-15)");
        setResizable(false);

        jPanelRAW.setBorder(javax.swing.BorderFactory.createTitledBorder("RAW Conversion"));

        jListRAWFiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListRAWFilesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListRAWFiles);

        jPanelCharts.setBorder(javax.swing.BorderFactory.createTitledBorder("Charts"));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanelM1.setBorder(javax.swing.BorderFactory.createTitledBorder("m1"));

        javax.swing.GroupLayout jPanelM1Layout = new javax.swing.GroupLayout(jPanelM1);
        jPanelM1.setLayout(jPanelM1Layout);
        jPanelM1Layout.setHorizontalGroup(
            jPanelM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelM1Layout.setVerticalGroup(
            jPanelM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 99, Short.MAX_VALUE)
        );

        jPanelHD.setBorder(javax.swing.BorderFactory.createTitledBorder("HD"));

        javax.swing.GroupLayout jPanelHDLayout = new javax.swing.GroupLayout(jPanelHD);
        jPanelHD.setLayout(jPanelHDLayout);
        jPanelHDLayout.setHorizontalGroup(
            jPanelHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        jPanelHDLayout.setVerticalGroup(
            jPanelHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 99, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelM1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelM1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelHD.getAccessibleContext().setAccessibleParent(jPanelHD);

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanelM3.setBorder(javax.swing.BorderFactory.createTitledBorder("m3"));

        javax.swing.GroupLayout jPanelM3Layout = new javax.swing.GroupLayout(jPanelM3);
        jPanelM3.setLayout(jPanelM3Layout);
        jPanelM3Layout.setHorizontalGroup(
            jPanelM3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelM3Layout.setVerticalGroup(
            jPanelM3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel3He.setBorder(javax.swing.BorderFactory.createTitledBorder("3He"));

        javax.swing.GroupLayout jPanel3HeLayout = new javax.swing.GroupLayout(jPanel3He);
        jPanel3He.setLayout(jPanel3HeLayout);
        jPanel3HeLayout.setHorizontalGroup(
            jPanel3HeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        jPanel3HeLayout.setVerticalGroup(
            jPanel3HeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelM3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3He, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelM3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3He, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel4He.setBorder(javax.swing.BorderFactory.createTitledBorder("4He"));

        javax.swing.GroupLayout jPanel4HeLayout = new javax.swing.GroupLayout(jPanel4He);
        jPanel4He.setLayout(jPanel4HeLayout);
        jPanel4HeLayout.setHorizontalGroup(
            jPanel4HeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4HeLayout.setVerticalGroup(
            jPanel4HeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel4He3He.setBorder(javax.swing.BorderFactory.createTitledBorder("4He/3He"));

        javax.swing.GroupLayout jPanel4He3HeLayout = new javax.swing.GroupLayout(jPanel4He3He);
        jPanel4He3He.setLayout(jPanel4He3HeLayout);
        jPanel4He3HeLayout.setHorizontalGroup(
            jPanel4He3HeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        jPanel4He3HeLayout.setVerticalGroup(
            jPanel4He3HeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4He, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4He3He, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4He, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4He3He, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelChartsLayout = new javax.swing.GroupLayout(jPanelCharts);
        jPanelCharts.setLayout(jPanelChartsLayout);
        jPanelChartsLayout.setHorizontalGroup(
            jPanelChartsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChartsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChartsLayout.setVerticalGroup(
            jPanelChartsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChartsLayout.createSequentialGroup()
                .addGroup(jPanelChartsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        jTableRAWResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Average (all)", null, null, null, null, null, null},
                {"Average (sel)", null, null, null, null, null, null},
                {"BF (all)", null, null, null, null, null, null},
                {"BF (selected)", null, null, null, null, null, null}
            },
            new String [] {
                "", "3He", "+-", "4He", "+-", "4He/3He", "+-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableRAWResults);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelRAWLayout = new javax.swing.GroupLayout(jPanelRAW);
        jPanelRAW.setLayout(jPanelRAWLayout);
        jPanelRAWLayout.setHorizontalGroup(
            jPanelRAWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRAWLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelRAWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelCharts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelRAWLayout.setVerticalGroup(
            jPanelRAWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRAWLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelRAWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanelRAWLayout.createSequentialGroup()
                        .addComponent(jPanelCharts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        jPanelBlankCorrect.setBorder(javax.swing.BorderFactory.createTitledBorder("Blank Correct"));

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Run", "4/3 Ratio", "+-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableData.setMaximumSize(new java.awt.Dimension(2147483647, 200));
        jScrollPaneData.setViewportView(jTableData);

        jTableBlank.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Run", "4/3 Ratio", "+-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPaneBlank.setViewportView(jTableBlank);

        javax.swing.GroupLayout jPanelBlankCorrectLayout = new javax.swing.GroupLayout(jPanelBlankCorrect);
        jPanelBlankCorrect.setLayout(jPanelBlankCorrectLayout);
        jPanelBlankCorrectLayout.setHorizontalGroup(
            jPanelBlankCorrectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBlankCorrectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBlankCorrectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBlankCorrectLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPaneData, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelBlankCorrectLayout.createSequentialGroup()
                        .addComponent(jScrollPaneBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelBlankCorrectLayout.setVerticalGroup(
            jPanelBlankCorrectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBlankCorrectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 894, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelBlankCorrect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 514, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(jPanelBlankCorrect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 30, Short.MAX_VALUE)))
        );
        jLayeredPane1.setLayer(jPanelBlankCorrect, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu1.setText("File");

        jMenuItemFileLoadDir.setText("Load Directory");
        jMenuItemFileLoadDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFileLoadDirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemFileLoadDir);

        jMenuItemSaveNcc.setText("Save ncc file");
        jMenuItemSaveNcc.setEnabled(false);
        jMenuItemSaveNcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveNccActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSaveNcc);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Data");

        jMenuItemDataProcessRAW.setText("Process RAW Data");
        jMenuItemDataProcessRAW.setEnabled(false);
        jMenuItemDataProcessRAW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDataProcessRAWActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemDataProcessRAW);

        jMenuDataBlank.setText("Blank Correct");
        jMenuDataBlank.setEnabled(false);

        jMenuItemDataBlankSelected.setText("Selected Blanks");
        jMenuItemDataBlankSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDataBlankSelectedActionPerformed(evt);
            }
        });
        jMenuDataBlank.add(jMenuItemDataBlankSelected);

        jMenuItemDataBlankAll.setText("All Blanks");
        jMenuItemDataBlankAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDataBlankAllActionPerformed(evt);
            }
        });
        jMenuDataBlank.add(jMenuItemDataBlankAll);

        jMenu3.add(jMenuDataBlank);

        jMenuItemCalcNCC.setText("Convert to ncc");
        jMenuItemCalcNCC.setEnabled(false);
        jMenuItemCalcNCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalcNCCActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemCalcNCC);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Method");

        jRadioButtonMenuBFAll.setSelected(true);
        jRadioButtonMenuBFAll.setText("Best Fit (All)");
        jRadioButtonMenuBFAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuBFAllActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuBFAll);

        jRadioButtonMenuBFSel.setText("Best Fit (Selected)");
        jRadioButtonMenuBFSel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMenuBFSelItemStateChanged(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuBFSel);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelRAW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelRAW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemFileLoadDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileLoadDirActionPerformed
        // TODO add your handling code here:
        LoadRAWFiles();
    }//GEN-LAST:event_jMenuItemFileLoadDirActionPerformed

    private XYDataset createDatasetM1() {

        final XYSeries series = new XYSeries("m1");
        Double X;
        Double Y;
        int NumRows = Global.DataArray.size();
        for (int i = 0; i < NumRows; i++) {
            String line[] = Global.DataArray.get(i).split(",");
            Y = Double.valueOf(line[1]);
            X = Double.valueOf(line[0]);
            series.add(Y, X);
        }

        return new XYSeriesCollection(series);
    }

    private XYDataset createDatasetHD() {

        final XYSeries series = new XYSeries("HD");
        Double X;
        Double Y;
        int NumRows = Global.DataArray.size();
        for (int i = 0; i < NumRows; i++) {
            String line[] = Global.DataArray.get(i).split(",");
            Y = (Double.valueOf(line[1]) * Global.HDH);
            X = Double.valueOf(line[0]);
            series.add(Y, X);
        }
        return new XYSeriesCollection(series);
    }

    private XYDataset createDatasetM3() {

        final XYSeries series = new XYSeries("m3");
        Double X;
        Double Y;
        int NumRows = Global.DataArray.size();
        for (int i = 0; i < NumRows; i++) {
            String line[] = Global.DataArray.get(i).split(",");
            Y = (Double.valueOf(line[2]));
            X = Double.valueOf(line[0]);
            series.add(Y, X);
        }
        return new XYSeriesCollection(series);
    }

    private XYDataset createDataset3He() {

        final XYSeries series = new XYSeries("m3");
        Double X;
        Double Y;
        int NumRows = Global.DataArray.size();
        for (int i = 0; i < NumRows; i++) {
            String line[] = Global.DataArray.get(i).split(",");
            Y = (Double.valueOf(line[2])) - (Double.valueOf(line[1]) * Global.HDH);
            X = Double.valueOf(line[0]);
            series.add(Y, X);
            Global.He3.add(X + "," + Y);
        }
        return new XYSeriesCollection(series);
    }

    private XYDataset createDataset4He() {

        final XYSeries series = new XYSeries("m3");
        Double X;
        Double Y;
        int NumRows = Global.DataArray.size();
        for (int i = 0; i < NumRows; i++) {
            String line[] = Global.DataArray.get(i).split(",");
            Y = (Double.valueOf(line[3]));
            X = Double.valueOf(line[0]);
            series.add(Y, X);
            Global.He4.add(X + "," + Y);
        }
        return new XYSeriesCollection(series);
    }

    private XYDataset createDataset4He3He() {

        final XYSeries series = new XYSeries("m3");
        Double X;
        Double Y;
        int NumRows = Global.DataArray.size();
        for (int i = 0; i < NumRows; i++) {
            String line[] = Global.DataArray.get(i).split(",");
            Double Y1 = (Double.valueOf(line[3]));
            Double Y2 = (Double.valueOf(line[2])) - (Double.valueOf(line[1]) * Global.HDH);
            Y = 1000 * Y1 / Y2;
            X = Double.valueOf(line[0]);
            series.add(Y, X);
            Global.Ratio4He3He.add(X + "," + Y);
        }
        return new XYSeriesCollection(series);
    }

    private void DisplayData() {

        String HNum = (String) jListRAWFiles.getSelectedValue();
        String HNumSplit[] = HNum.split(" ");

        String filename = (Global.Directory + File.separator + HNumSplit[0]);
        DefaultListModel dataModel = new DefaultListModel();

        try {
            File archivo = new File(filename);

            long datetime = archivo.lastModified();
            Date d = new Date(datetime);
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            String dateString = sdf.format(d);
            Global.Date = dateString;
            Global.Dates.add(dateString);
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            int i = 0;

            String line;
            while ((line = br.readLine()) != null) {

                line = line.replaceAll("\t", ",");

                if (i == 0) {
                    String Line[] = line.split("@");
                    line = Line[1];
                }
                Global.DataArray.add(line);
                i++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void LoadCharts() {

        final XYDataset dataM1 = createDatasetM1();
        final XYDataset dataHD = createDatasetHD();
        final XYDataset dataM3 = createDatasetM3();
        final XYDataset data3He = createDataset3He();
        final XYDataset data4He = createDataset4He();
        final XYDataset data4He3He = createDataset4He3He();

        if (Global.IgnoreCharts == 0) {

            jPanelM1.removeAll();
            jPanelM3.removeAll();
            jPanelHD.removeAll();
            jPanel3He.removeAll();
            jPanel4He.removeAll();
            jPanel4He3He.removeAll();
            
            JFreeChart chartM1 = ChartFactory.createScatterPlot(null, "", "", dataM1, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            jPanelM1.setLayout(new java.awt.BorderLayout());
            ChartPanel CP1 = new ChartPanel(chartM1);
            chartM1.removeLegend();
            jPanelM1.add(CP1, BorderLayout.CENTER);
            jPanelM1.validate();

            JFreeChart chartHD = ChartFactory.createScatterPlot(null, "", "", dataHD, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            jPanelHD.setLayout(new java.awt.BorderLayout());
            ChartPanel CP2 = new ChartPanel(chartHD);
            chartHD.removeLegend();
            jPanelHD.add(CP2, BorderLayout.CENTER);
            jPanelHD.validate();

            JFreeChart chartM3 = ChartFactory.createScatterPlot(null, "", "", dataM3, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            jPanelM3.setLayout(new java.awt.BorderLayout());
            ChartPanel CP3 = new ChartPanel(chartM3);
            chartM3.removeLegend();
            jPanelM3.add(CP3, BorderLayout.CENTER);
            jPanelM3.validate();

            JFreeChart chart3He = ChartFactory.createScatterPlot(null, "", "", data3He, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            jPanel3He.setLayout(new java.awt.BorderLayout());
            ChartPanel CP4 = new ChartPanel(chart3He);
            chart3He.removeLegend();
            jPanel3He.add(CP4, BorderLayout.CENTER);
            jPanel3He.validate();

            JFreeChart chart4He = ChartFactory.createScatterPlot(null, "", "", data4He, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            jPanel4He.setLayout(new java.awt.BorderLayout());
            ChartPanel CP5 = new ChartPanel(chart4He);
            chart4He.removeLegend();
            jPanel4He.add(CP5, BorderLayout.CENTER);
            jPanel4He.validate();

            JFreeChart chart4He3He = ChartFactory.createScatterPlot(null, "", "", data4He3He, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            jPanel4He3He.setLayout(new java.awt.BorderLayout());
            ChartPanel CP6 = new ChartPanel(chart4He3He);
            chart4He3He.removeLegend();
            jPanel4He3He.add(CP6, BorderLayout.CENTER);
            jPanel4He3He.validate();
        }
    }

    private void ResultsTable() {

        int i = 0;

        DecimalFormat DF = new DecimalFormat("##0.000");

        Double[] He3_array = new Double[Global.He3.size()];
        Double[] He4_array = new Double[Global.He4.size()];
        Double[] Time_array = new Double[Global.He3.size()];
        Double[] R_array = new Double[Global.Ratio4He3He.size()];

        //Load Data from arrays
        while (i < Global.He3.size()) {
            String line3He[] = Global.He3.get(i).split(",");
            String line4He[] = Global.He4.get(i).split(",");
            String lineR[] = Global.Ratio4He3He.get(i).split(",");
            Time_array[i] = Double.valueOf(line3He[0]);
            He3_array[i] = Double.valueOf(line3He[1]);
            He4_array[i] = Double.valueOf(line4He[1]);
            R_array[i] = Double.valueOf(lineR[1]);
            i++;
        }

        //Average of all data
        Global.He3_average = ToolBox.Tools.average(He3_array);
        Global.He3_SD = ToolBox.Tools.StdDev(He3_array);

        Global.He4_average = ToolBox.Tools.average(He4_array);
        Global.He4_SD = ToolBox.Tools.StdDev(He4_array);

        Global.R_average = ToolBox.Tools.average(R_array);
        Global.R_SD = ToolBox.Tools.StdDev(R_array);

        //Put in table
        String He3_ave = DF.format(Global.He3_average);
        String He3_sd = DF.format(Global.He3_SD);
        String He4_ave = DF.format(Global.He4_average);
        String He4_sd = DF.format(Global.He4_SD);
        String Ratio_ave = DF.format(Global.R_average);
        String Ratio_sd = DF.format(Global.R_SD);

        jTableRAWResults.getModel().setValueAt(He3_ave, 0, 1);
        jTableRAWResults.getModel().setValueAt(He3_sd, 0, 2);
        jTableRAWResults.getModel().setValueAt(He4_ave, 0, 3);
        jTableRAWResults.getModel().setValueAt(He4_sd, 0, 4);
        jTableRAWResults.getModel().setValueAt(Ratio_ave, 0, 5);
        jTableRAWResults.getModel().setValueAt(Ratio_sd, 0, 6);

        //Best Fit of All Data
        Double[] BestFitResultHe3 = ToolBox.Tools.getBestFitLinear(Time_array, He3_array);
        Double[] BestFitResultHe4 = ToolBox.Tools.getBestFitLinear(Time_array, He4_array);
        Double[] BestFitResultRatio = ToolBox.Tools.getBestFitLinear(Time_array, R_array);

        Global.He3_bf = BestFitResultHe3[1];
        Global.He4_bf = BestFitResultHe4[1];
        Global.R_bf = BestFitResultRatio[1];
        Global.He3_bf_SD = BestFitResultHe3[2];
        Global.He4_bf_SD = BestFitResultHe4[2];
        Global.Ratio_bf_SD = BestFitResultRatio[2];

        String He3_bf_str = DF.format(Global.He3_bf);
        String He3_sd_bf = DF.format(Global.He3_bf_SD);
        String He4_bf_str = DF.format(Global.He4_bf);
        String He4_sd_bf = DF.format(Global.He4_bf_SD);
        String Ratio_bf = DF.format(Global.R_bf);
        String Ratio_sd_bf = DF.format(Global.Ratio_bf_SD);

        jTableRAWResults.getModel().setValueAt(He3_bf_str, 2, 1);
        jTableRAWResults.getModel().setValueAt(He3_sd_bf, 2, 2);
        jTableRAWResults.getModel().setValueAt(He4_bf_str, 2, 3);
        jTableRAWResults.getModel().setValueAt(He4_sd_bf, 2, 4);
        jTableRAWResults.getModel().setValueAt(Ratio_bf, 2, 5);
        jTableRAWResults.getModel().setValueAt(Ratio_sd_bf, 2, 6);

        //load selected
        Double[] sel_He3_array = new Double[Global.He3.size() - Global.NumIgnore];
        Double[] sel_He4_array = new Double[Global.He4.size() - Global.NumIgnore];
        Double[] sel_Time_array = new Double[Global.He3.size() - Global.NumIgnore];
        Double[] sel_R_array = new Double[Global.Ratio4He3He.size() - Global.NumIgnore];

        i = 0;
        while (i < Global.He3.size() - Global.NumIgnore) {
            String line3He[] = Global.He3.get(i + Global.NumIgnore).split(",");
            String line4He[] = Global.He4.get(i + Global.NumIgnore).split(",");
            String lineR[] = Global.Ratio4He3He.get(i + Global.NumIgnore).split(",");
            sel_Time_array[i] = Double.valueOf(line3He[0]);
            sel_He3_array[i] = Double.valueOf(line3He[1]);
            sel_He4_array[i] = Double.valueOf(line4He[1]);
            sel_R_array[i] = Double.valueOf(lineR[1]);
            i++;
        }

        //Average of selected data
        Global.sel_He3_average = ToolBox.Tools.average(sel_He3_array);
        Global.sel_He3_SD = ToolBox.Tools.StdDev(sel_He3_array);
        Global.sel_He4_average = ToolBox.Tools.average(sel_He4_array);
        Global.sel_He4_SD = ToolBox.Tools.StdDev(sel_He4_array);
        Global.sel_R_average = ToolBox.Tools.average(R_array);
        Global.sel_R_SD = ToolBox.Tools.StdDev(sel_R_array);

        String sel_He3_ave = DF.format(Global.sel_He3_average);
        String sel_He3_sd = DF.format(Global.sel_He3_SD);
        String sel_He4_ave = DF.format(Global.sel_He4_average);
        String sel_He4_sd = DF.format(Global.sel_He4_SD);
        String sel_Ratio_ave = DF.format(Global.sel_R_average);
        String sel_Ratio_sd = DF.format(Global.sel_R_SD);

        jTableRAWResults.getModel().setValueAt(sel_He3_ave, 1, 1);
        jTableRAWResults.getModel().setValueAt(sel_He3_sd, 1, 2);
        jTableRAWResults.getModel().setValueAt(sel_He4_ave, 1, 3);
        jTableRAWResults.getModel().setValueAt(sel_He4_sd, 1, 4);
        jTableRAWResults.getModel().setValueAt(sel_Ratio_ave, 1, 5);
        jTableRAWResults.getModel().setValueAt(sel_Ratio_sd, 1, 6);

        //Best Fit to selected
        Double[] sel_BestFitResultHe3 = ToolBox.Tools.getBestFitLinear(sel_Time_array, sel_He3_array);
        Double[] sel_BestFitResultHe4 = ToolBox.Tools.getBestFitLinear(sel_Time_array, sel_He4_array);
        Double[] sel_BestFitResultRatio = ToolBox.Tools.getBestFitLinear(sel_Time_array, sel_R_array);

        Global.sel_He3_bf = sel_BestFitResultHe3[1];
        Global.sel_He4_bf = sel_BestFitResultHe4[1];
        Global.sel_R_bf = sel_BestFitResultRatio[1];
        Global.sel_He3_bf_SD = sel_BestFitResultHe3[2];
        Global.sel_He4_bf_SD = sel_BestFitResultHe4[2];
        Global.sel_Ratio_bf_SD = sel_BestFitResultRatio[2];

        String sel_He3_bf_str = DF.format(Global.sel_He3_bf);
        String sel_He3_sd_bf = DF.format(Global.sel_He3_bf_SD);
        String sel_He4_bf_str = DF.format(Global.sel_He4_bf);
        String sel_He4_sd_bf = DF.format(Global.sel_He4_bf_SD);
        String sel_Ratio_bf = DF.format(Global.sel_R_bf);
        String sel_Ratio_sd_bf = DF.format(Global.sel_Ratio_bf_SD);

        jTableRAWResults.getModel().setValueAt(sel_He3_bf_str, 3, 1);
        jTableRAWResults.getModel().setValueAt(sel_He3_sd_bf, 3, 2);
        jTableRAWResults.getModel().setValueAt(sel_He4_bf_str, 3, 3);
        jTableRAWResults.getModel().setValueAt(sel_He4_sd_bf, 3, 4);
        jTableRAWResults.getModel().setValueAt(sel_Ratio_bf, 3, 5);
        jTableRAWResults.getModel().setValueAt(sel_Ratio_sd_bf, 3, 6);

    }


    private void jListRAWFilesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListRAWFilesValueChanged
        // TODO add your handling code here:

        if (!evt.getValueIsAdjusting()) {

            ClearArrays();

            DisplayData();
            LoadCharts();
            ResultsTable();

        }

    }//GEN-LAST:event_jListRAWFilesValueChanged

    private void jMenuItemDataProcessRAWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDataProcessRAWActionPerformed

        Global.IgnoreCharts = 1;

        LaunchBlankCorrect();

        PopulateSampleTable();

        jMenuDataBlank.setEnabled(true);


    }//GEN-LAST:event_jMenuItemDataProcessRAWActionPerformed

    private void jMenuItemDataBlankSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDataBlankSelectedActionPerformed

        GetSelection();
        BlankCorrect();

    }//GEN-LAST:event_jMenuItemDataBlankSelectedActionPerformed

    private void jMenuItemDataBlankAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDataBlankAllActionPerformed
        SetSelection();
        BlankCorrect();
    }//GEN-LAST:event_jMenuItemDataBlankAllActionPerformed

    private void jMenuItemSaveNccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveNccActionPerformed
        // TODO add your handling code here:

        SaveNcc();

    }//GEN-LAST:event_jMenuItemSaveNccActionPerformed

    private void jMenuItemCalcNCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalcNCCActionPerformed
        // TODO add your handling code here:

        NccConv();


    }//GEN-LAST:event_jMenuItemCalcNCCActionPerformed

    private void jRadioButtonMenuBFSelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMenuBFSelItemStateChanged
        // TODO add your handling code here:
        
        if (jRadioButtonMenuBFSel.isSelected()){
            jRadioButtonMenuBFAll.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButtonMenuBFSelItemStateChanged

    private void jRadioButtonMenuBFAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuBFAllActionPerformed
        // TODO add your handling code here:
        if (jRadioButtonMenuBFAll.isSelected()){
            jRadioButtonMenuBFSel.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButtonMenuBFAllActionPerformed

    private void SaveNcc() {

        File LoadFile = ToolBox.Tools.SaveFile("CSV File", "CSV");

        if (LoadFile == null) {
            System.err.println("No Save File Selected");
        } else {

            FileOutputStream fout;

            try {
                // Open an output stream
                fout = new FileOutputStream(LoadFile);
                int lines = jTableData.getModel().getRowCount();
                // Print a line of text
                int i = 0;

                new PrintStream(fout).println("Description,"
                        + "ncc,"
                        + "+-");

                do {
                    String line = jTableData.getModel().getValueAt(i, 0) + ","
                            + jTableData.getModel().getValueAt(i, 1) + ","
                            + jTableData.getModel().getValueAt(i, 2) + ",";
                    new PrintStream(fout).println(line);
                    i++;
                } while (i < lines);

                // Close our output stream
                fout.close();
            } // Catches any error conditions
            catch (IOException e) {
                System.err.println("Unable to write to file");
                System.exit(-1);
            }

        }

    }

    private void BlankCorrect() {

        //Take the average of the selected blanks
        ArrayList<Double> Blanks = new ArrayList<>();
        int i = 0;
        while (i < Global.SelectedBlanks.size()) {
            int selected = Global.SelectedBlanks.get(i);
            String S1 = jTableBlank.getModel().getValueAt(selected, 1).toString();
            Double N = Double.valueOf(S1);
            Blanks.add(N);
            i++;
        }

        Double average = ToolBox.Tools.ArrayList_average(Blanks);
        Double SD = ToolBox.Tools.ArrayList_SD(Blanks);

        i = 0;
        while (i < Global.SelectedData.size()) {
            int selected = Global.SelectedData.get(i);
            String S = jTableData.getModel().getValueAt(selected, 0).toString();
            String S1 = jTableData.getModel().getValueAt(selected, 1).toString();
            String S2 = jTableData.getModel().getValueAt(selected, 2).toString();

            Double N = Double.valueOf(S1);
            Double Nerr = Double.valueOf(S2);

            Double C = N - average;
            Double Cerr = Math.sqrt((Nerr * Nerr) + (SD + SD));

            String Line = (S + "," + C + "," + Cerr);

            Global.BlankCorrected.add(Line);

            i++;
        }

        //Remove selected data from table
        i = jTableData.getModel().getRowCount();
        while (i > -1) {
            if (jTableData.isRowSelected(i)) {
                ((DefaultTableModel) jTableData.getModel()).removeRow(i);
            }

            i--;
        }

        jMenuItemCalcNCC.setEnabled(true);

        if (jTableData.getModel().getRowCount() == 0) {
            NccConv();
            jMenuItemCalcNCC.setEnabled(false);

        }

    }

    private void NccConv() {

        Double Qncc = 0.0;
        Double QnccErr = 0.0;
        Double Qratio = 0.0;
        Double QratioErr = 0.0;
        String Qstr = "";

        DecimalFormat DF = new DecimalFormat("#0.0000");

        //Hide blank table
        jScrollPaneBlank.setVisible(false);
        jScrollPaneBlank.setSize(1, 1);
        int w = jScrollPaneData.getWidth();

        jScrollPaneData.setSize(w, 400);

        //Change data table headers
        jTableData.getTableHeader().getColumnModel().getColumn(1).setHeaderValue("4/3 (ncc)");
        repaint();

        DefaultTableModel model = (DefaultTableModel) jTableData.getModel();
        model.setRowCount(Global.BlankCorrected.size());

       // model.setColumnCount(4);
        //Convert to ncc
        int i = 0;

        while (i < Global.BlankCorrected.size()) {

            String Line[] = Global.BlankCorrected.get(i).split(",");
            jTableData.getModel().setValueAt(Line[0], i, 0);
            jTableData.getModel().setValueAt(Line[1], i, 1);
            jTableData.getModel().setValueAt(Line[2], i, 2);
            //Spilt the first Column to find out if it is a Q-shot

            String Name = Line[0];

            //Find out how many chars to the first R.
            int R = Name.indexOf("R");

            String SubString = Name.substring(R + 2);

            if (SubString.startsWith("Q")) {

                //Measured 4/3 ratio for standard
                Qratio = Double.parseDouble(Line[1]);
                QratioErr = Double.parseDouble(Line[2]);

                //Work out which Q shot it is
                int Qnum = Integer.valueOf(SubString.substring(1).trim());
                Qstr = " (Q" + Qnum + ")";

                Double DNum = Math.pow(Global.DepletionFactor, Qnum);
                //Calculate Qncc
                Qncc = 10.23 * DNum;

                //Calculate uncertainty on the Q shot.
                QnccErr = Qncc * Math.sqrt(Math.pow((0.07 / 10.23), 2)
                        + Math.pow((Qnum * Global.DepletionErr) / (DNum), 2));

                jTableData.getModel().setValueAt(DF.format(Qncc), i, 1);
                jTableData.getModel().setValueAt(DF.format(QnccErr), i, 2);

            } else {

                Double Sratio = Double.parseDouble(Line[1]);
                Double SratioErr = Double.parseDouble(Line[2]);

                //Calculate sample in ncc based on Qncc
                Double ncc = (Qncc * Sratio) / Qratio;

                //Calculate uncertainty in sample ncc
                Double A = Math.pow(QnccErr / Qncc, 2);
                Double B = Math.pow(QratioErr / Qratio, 2);
                Double C = Math.pow((SratioErr
                        / Sratio), 2);
                Double nccerr = ncc * Math.sqrt(A + B + C);

                jTableData.getModel().setValueAt(DF.format(ncc), i, 1);
                jTableData.getModel().setValueAt(DF.format(nccerr), i, 2);

                //Add in reference for Q used.
                jTableData.getModel().setValueAt(Line[0] + Qstr, i, 0);

            }

            System.out.println(SubString);

            i++;
        }

        jMenuItemSaveNcc.setEnabled(true);

    }

    private void GetSelection() {
        //Get the selected lines from the two tables and store in an array.

        Global.SelectedBlanks.clear();
        Global.SelectedData.clear();

        int i = 0;

        while (i < jTableData.getRowCount()) {
            if (jTableData.isRowSelected(i)) {
                Global.SelectedData.add(i);
            }
            i++;
        }
        i = 0;
        while (i < jTableBlank.getRowCount()) {
            if (jTableBlank.isRowSelected(i)) {
                Global.SelectedBlanks.add(i);
            }
            i++;
        }

    }

    private void SetSelection() {

        Global.SelectedBlanks.clear();
        Global.SelectedData.clear();

        int i = 0;

        while (i < jTableData.getRowCount()) {
            Global.SelectedData.add(i);
            i++;
        }

        i = 0;
        while (i < jTableBlank.getRowCount()) {
            Global.SelectedBlanks.add(i);
            i++;
        }

        jTableData.selectAll();

    }

    private void PopulateSampleTable() {

        ArrayList<String> BlankList = new ArrayList<String>();
        ArrayList<String> DataList = new ArrayList<String>();

        int i = 0;
        while (i < jListRAWFiles.getModel().getSize()) {
            jListRAWFiles.setSelectedIndex(i);

            String Name = jListRAWFiles.getModel().getElementAt(i).toString();
            
            if (jRadioButtonMenuBFAll.isSelected()){
            
            //BestFit All
            if (Name.contains("LB")) {

                String Ratio = Global.R_bf.toString();
                String err = Global.Ratio_bf_SD.toString();

                BlankList.add(Name + "," + Ratio + "," + err);

            } else {

                //    String Ratio = Global.Ratio4He3He.get(i);
                String Ratio = Global.R_bf.toString();
                String err = Global.Ratio_bf_SD.toString();

                DataList.add(Name + "," + Ratio + "," + err);

            }
            }

            if (jRadioButtonMenuBFSel.isSelected()){
               //BestFit Selected
            if (Name.contains("LB")) {

                String Ratio = Global.sel_R_bf.toString();
                String err = Global.sel_Ratio_bf_SD.toString();

                BlankList.add(Name + "," + Ratio + "," + err);

            } else {

                //    String Ratio = Global.Ratio4He3He.get(i);
                String Ratio = Global.sel_R_bf.toString();
                String err = Global.sel_Ratio_bf_SD.toString();

                DataList.add(Name + "," + Ratio + "," + err);

            } 
                
            }
            
            i++;
        }

        DefaultTableModel modelD = (DefaultTableModel) jTableData.getModel();
        modelD.setRowCount(DataList.size());

        DefaultTableModel modelB = (DefaultTableModel) jTableBlank.getModel();
        modelB.setRowCount(BlankList.size());

        i = 0;
        while (i < DataList.size()) {
            String Line[] = DataList.get(i).split(",");
            jTableData.setValueAt(Line[0], i, 0);
            jTableData.setValueAt(Line[1], i, 1);
            jTableData.setValueAt(Line[2], i, 2);
            i++;
        }

        i = 0;
        while (i < BlankList.size()) {
            String Line[] = BlankList.get(i).split(",");
            jTableBlank.setValueAt(Line[0], i, 0);
            jTableBlank.setValueAt(Line[1], i, 1);
            jTableBlank.setValueAt(Line[2], i, 2);
            i++;
        }

    }

    public void LaunchBlankCorrect() {
        jPanelRAW.setVisible(false);

        jPanelBlankCorrect.setVisible(true);
    }

    private void ClearArrays() {
        Global.DataArray.clear();
        Global.He3.clear();
        Global.He4.clear();
        Global.Ratio4He3He.clear();
    }

    private void LoadRAWFiles() {

        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.showOpenDialog(jMenu1);
        File dir = new File(fc.getSelectedFile().getPath());
        Global.Directory = dir.toString();

        DefaultListModel filelistModel = new DefaultListModel();

        jListRAWFiles.setModel(filelistModel);

        int i = 0;
        int j = 0;

        //String HE3Str = "";
        String[] children = dir.list();
        if (children == null) {
            // Either dir does not exist or is not a directory
        } else {
            for (i = 0; i < children.length; i++) {
                // Get filename of file or directory
                String filename = children[i];
                //if filename begins with HE and ends with R, then
                //add it to the list.
                if (filename.startsWith("HE")) {
                    String filename_full = (dir + File.separator + filename);
                    String ShotName = RunName(filename_full);
                    String ListName = (children[i] + " " + ShotName);
                    filelistModel.add(j, ListName);
                    j++;
                }
            }

            jMenuItemDataProcessRAW.setEnabled(true);

        }
        //  Global.He3Signal = HE3Str;
        Global.NumberOfFiles = j;

    }

    public String RunName(String filename) {

        //Opens the file currently being added to the list 
        //and gets the Sample Run Name (i.e. Sample, Q#### or LB)
        //Filename (as a string) is input. 
        //Need something to return if "try" fails
        String RunName = "";

        //Read the first line of the file
        try {
            File archivo = new File(filename);
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            String line = br.readLine();
            //Split the line by @ - name is in the first character
            String data[] = line.split("@");
            RunName = data[0];
        } catch (Exception e) {
            System.err.println("Error in RunName:");
            System.err.println(e);
        }
        //Return the sample name
        return RunName;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HeliumSingleFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HeliumSingleFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HeliumSingleFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HeliumSingleFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HeliumSingleFileUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JList jListRAWFiles;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDataBlank;
    private javax.swing.JMenuItem jMenuItemCalcNCC;
    private javax.swing.JMenuItem jMenuItemDataBlankAll;
    private javax.swing.JMenuItem jMenuItemDataBlankSelected;
    private javax.swing.JMenuItem jMenuItemDataProcessRAW;
    private javax.swing.JMenuItem jMenuItemFileLoadDir;
    private javax.swing.JMenuItem jMenuItemSaveNcc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel3He;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel4He;
    private javax.swing.JPanel jPanel4He3He;
    private javax.swing.JPanel jPanelBlankCorrect;
    private javax.swing.JPanel jPanelCharts;
    private javax.swing.JPanel jPanelHD;
    private javax.swing.JPanel jPanelM1;
    private javax.swing.JPanel jPanelM3;
    private javax.swing.JPanel jPanelRAW;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuBFAll;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuBFSel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneBlank;
    private javax.swing.JScrollPane jScrollPaneData;
    private javax.swing.JTable jTableBlank;
    private javax.swing.JTable jTableData;
    private javax.swing.JTable jTableRAWResults;
    // End of variables declaration//GEN-END:variables
}
